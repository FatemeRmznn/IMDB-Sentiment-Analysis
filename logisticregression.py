# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19xLCUB6vtXez15TLvCmgKZkApcGlZzTh
"""

import pandas as pd
import numpy as np
import requests
import tarfile
import io
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score

# Download and load the dataset
dataset_url = "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
response = requests.get(dataset_url)

# Extract data from the tar archive
with tarfile.open(fileobj=io.BytesIO(response.content), mode='r:gz') as tar:
    tar.extractall()

# Load data manually (adjust this part based on extracted files)
def load_imdb_data(folder):
    import os
    texts, labels = [], []
    for label in ['pos', 'neg']:
        folder_path = f"aclImdb/{folder}/{label}"
        for file in os.listdir(folder_path):
            with open(os.path.join(folder_path, file), encoding='utf-8') as f:
                texts.append(f.read())
                labels.append(1 if label == 'pos' else 0)
    return pd.DataFrame({'review_body': texts, 'sentiment': labels})

train_data = load_imdb_data('train')
test_data = load_imdb_data('test')

# Split train data into training and validation sets
train_texts, val_texts, train_labels, val_labels = train_test_split(
    train_data['review_body'], train_data['sentiment'], test_size=0.2, random_state=42, stratify=train_data['sentiment']
)

# Vectorize the text data
vectorizer = TfidfVectorizer()
train_vectors = vectorizer.fit_transform(train_texts)
val_vectors = vectorizer.transform(val_texts)
test_vectors = vectorizer.transform(test_data['review_body'])

# Train Logistic Regression model
model = LogisticRegression(max_iter=1000)
model.fit(train_vectors, train_labels)

# Predict sentiments on the test set
predictions = model.predict(test_vectors)

# Evaluate the model
print(classification_report(test_data['sentiment'], predictions, target_names=['Negative', 'Positive']))

# Calculate evaluation metrics
accuracy = accuracy_score(test_data['sentiment'], predictions)
precision = precision_score(test_data['sentiment'], predictions)
recall = recall_score(test_data['sentiment'], predictions)
f1 = f1_score(test_data['sentiment'], predictions)

print("Logistic Regression Model Evaluation Metrics:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")

# Display predicted sentiments
predicted_sentiments = ['Positive' if p == 1 else 'Negative' for p in predictions]
print(predicted_sentiments[:10])  # Display first 10 predictions